# Python File CSV
# csv — CSV File Reading and Writing.
# The so-called CSV (Comma Separated Values) format is the most common import and export format for spreadsheets and databases.
# CSV format was used for many years prior to attempts to describe the format in a standardized way in RFC 4180.
# The lack of a well-defined standard means that subtle differences often exist in the data produced and consumed by different applications.
# These differences can make it annoying to process CSV files from multiple sources.
# Still, while the delimiters and quoting characters vary, the overall format is similar enough that it is possible to write a single module
# which can efficiently manipulate such data, hiding the details of reading and writing the data from the programmer.
# The csv module implements classes to read and write tabular data in CSV format.
# It allows programmers to say, “write this data in the format preferred by Excel,” or “read data from this file which was generated by Excel,”
# without knowing the precise details of the CSV format used by Excel.
# Programmers can also describe the CSV formats understood by other applications or define their own special-purpose CSV formats.
# The csv module’s reader and writer objects read and write sequences.
# Programmers can also read and write data in dictionary form using the DictReader and DictWriter classes.
# class csv.Sniffer 
# The Sniffer class is used to deduce the format of a CSV file.
# The Sniffer class provides two methods:
# sniff(sample, delimiters=None) 
# Analyze the given sample and return a Dialect subclass reflecting the parameters found. If the optional delimiters parameter is given, it is
# interpreted as a string containing possible valid delimiter characters.
# has_header(sample) 
# Analyze the sample text (presumed to be in CSV format) and return True if the first row appears to be a series of column headers.
 
# Using Sniffer:
 
with open('example.csv', newline='') as csvfile:
    dialect = csv.Sniffer().sniff(csvfile.read(1024))

    csvfile.seek(0)

    reader = csv.reader(csvfile, dialect)

    # ... process CSV file contents here ...
